/******** DO NOT EDIT THIS FILE ********/
#ifndef _PROC_H
#define _PROC_H
#include <stdlib.h>
#include <stdbool.h>
#include "sim_config.h"

/*
 * Introduction
 * 
 * proc.h defines types and functions that support simulation
 * and provide meta information about processes in the simulation to control
 * their execution.
 */
 
/*
 * Specification of range of work to do. During a simulation, when 
 * a work a deley is required to simulate work to be done, a random 
 * number for the millisecond delay is generated between the work_ms min
 * and max values.
 */
typedef struct work_ms {
    long min;
    long max;
} work_ms_t;

/* 
 * Enum of process types for simulations, used as a field of the proc struct 
 * (see below).
 */
typedef enum proctype {
    BWAIT_CONS_PROC, BWAIT_PROD_PROC, SEM_CONS_PROC, SEM_PROD_PROC 
} proctype_t;

/* 
 * Process descriptor type
 */
typedef struct proc {
    proctype_t type;            // process type (see above)
    char type_label[MAX_NAME_SIZE]; // a string representation of the proctype
    char name[MAX_NAME_SIZE];   // application specific process name
    pid_t id;                   // process id
    int jobs;                   // number of jobs to do 
    bool is_init;               // is init process that sets up shared 
                                // memory etc.
    long delay_start;           // delay process start
    long delay_exit;            // delay process exit
    work_ms_t crit_work;        // work to do in critical section
    work_ms_t noncrit_work;     // work to do in non-critical section
} proc_t;

/*
 * proc_new(proctype_t type, char* name, pid_t pid, int jobs, bool is_init,
 *      int delay_start, int delay_exit, work_ms_t crit_work, 
 *      work_ms_t noncrit_work)
 * 
 * Creates a new (dynamically allocated) proc struct, setting the fields to 
 * the values passed as parameters.
 * 
 * Use proc_delete to delete a proc struct allocated by proc_new.
 *
 * Return
 * A pointer to a new dynamically allocated process descriptor (proc) struct.
 *
 * Errors
 * If the type parameter is invalid (not one of the members of the proctype 
 * enum), the function returns NULL.
 * If the jobs parameter is < 1, the function returns NULL.
 * If the name parameter is NULL or the empty string, the name field of 
 * the returned proc will be none.
 */
proc_t* proc_new(proctype_t type, char* name, pid_t pid, int jobs, bool is_init,   
    int delay_start, int delay_exit, work_ms_t crit_work, 
    work_ms_t noncrit_work);
    
/* 
 * delay_ms(long ms)
 * 
 * Inject a fixed delay of ms milliseconds during a simulation
 *
 *
 * Parameters:
 * ms - the length of the delay in milliseconds. If ms < 1, this function
 *      has no effect.
 */
void delay_ms(long ms);

/*
 * do_critical_work(proc_t* proc)
 *
 * For use in a critical section to inject a random millisecond delay in
 * process execution (during which the process will block). The random 
 * delay will be in the range of the proc.crit_work min and max values, 
 * provided min < max and min is >= 1. If max <= min or min < 1, then this
 * function has no effect.
 *
 * Parameters:
 * proc - the process that specifies the delay range. If proc is NULL 
 *      this function has no effect
 *
 */
void do_critical_work(proc_t* proc);

/*
 * do_noncritical_work(proc_t* proc)
 *
 * For use in a non-critical section to inject a random millisecond delay in
 * process execution (during which the process will block). The random 
 * delay will be in the range of the proc.noncrit_work min and max values,
 * provided min < max and min is >= 1. If max <= min or min < 1, then this
 * function has no effect.
 *
 * Parameters:
 * proc - the process that specifies the delay range. If proc is NULL 
 *      this function has no effect
 */
void do_noncritical_work(proc_t* proc);

/*
 * proc_delete(proc_t* proc);
 * 
 * Delete a proc struct that has been dynamically allocated by proc_new.
 *
 * If proc is NULL this function has no effect.
 *
 * Parameters:
 * proc - a pointer to a proc struct allocated by proc_new. 
 */
void proc_delete(proc_t* proc);
    
#endif