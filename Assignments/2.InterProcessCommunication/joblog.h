/******** DO NOT EDIT THIS FILE ********/
#ifndef _JOBLOG_H
#define _JOBLOG_H
#include "job.h"
#include "proc.h"

/*
 * joblog_init(proc_t* proc)
 *
 * Initialise a joblog for the given process to write jobs to.
 * Log initialisation does the following:
 * 1. if proc is the init process (its is_init field is true), create the 
 *    parent directory (./out) for logs if it does not already exist. 
 * 2. delete any existing log for the given process
 *
 * Note: joblogs are initialised as part of the set of simulations in 
 * the simulation_setup function in sim_control.c. Or as part of joblog tests.
 *
 * Parameters:
 * proc - the non-NULL descriptor of a process that will log jobs
 *
 * Return:
 * On success: 0
 * On failure: -1, and errno is set as specified in Errors.
 *
 * Errors:
 * If the call fails, -1 will be returned and errno will be set as follows:
 *      EINVAL - invalid argument if proc is NULL
 *      Other values as specified by the system library functions used to
 *      implement the function (see below)
 *
 * See also:
 * proc.h - for a description of the proc type
 * man pages for mkdir, unlink and stat
 */
int joblog_init(proc_t* proc);

/*
 * joblog_read(proc_t* proc, int entry_num, job_t* job)
 *
 * Read the specified entry from the given process' log. The entry_num 
 * specifies the log entry to read. If there are N entries in the log file, 
 * a valid entry_num will be in range 0 to N - 1. The first (or oldest)
 * entry in the log has entry_num 0. That is the lines of the log file are 
 * indexed by entry_num like an array from 0 to N - 1.
 * 
 * Each entry in the log is a line of text representing a job terminated by 
 * a new line. The text is a string specified by the JOB_STR_FMT defined in 
 * job.h. See joblog_write for more information.
 *
 * If there is an entry for the given entry_num, then it is read as a string
 * from the log and converted to a job_t struct at the address specified by 
 * the job parameter. If the job parameter is NULL, a new dynamically allocated
 * job is used.
 *
 * A pointer to the read job is returned as a result of calling the function.
 *
 * If job is NULL, it is the responsibility of the programmer who calls the 
 * the joblog_read function to deallocate the resulting dynamically
 * allocated object.
 *
 * Usage:
 *      // Read and process each entry of the log
 *      int i = 0;
 *      job_t job;
 *      job_t* jptr = NULL;
 *   
 *      while ((jptr = joblog_read(proc, i, &job))) {
 *          // process job through the returned pointer jptr, e.g.:
 *          printf("priority: %u\n", jptr->priority);
 *          i++;
 *      }
 *
 * Parameters:
 * proc - the non-null descriptor of the process whose log to read
 * entry_num - the non-negative number of the entry in the log to read
 * job - a pointer to a job to convert the string entry to. 
 *      If job is NULL the function dynamically allocates one.
 *
 * Return:
 * On success: a job that is the entry in the given process' log specified 
 *      by the given entry_num. If the job is dynamically allocated (see 
 *      above), it is the responsibility of the user of this function to free
 *      the memory allocated by the function.
 * On failure: NULL, and failures are handled as specified in the Notes 
 *      section
 *
 * Errors:
 * joblog_read() returns NULL for most errors. Errors caused by the 
 * joblog_read function are suppressed as if the function were never
 * called. See the Notes section.
 * joblog_read() does not attempt to read the log and returns NULL and 
 * does NOT set the errno for following errors:
 * 1. proc is NULL
 * 2. entry_num is < 0
 * 3. a filename cannot be generated from the given proc descriptor
 *
 * Notes:
 * If joblog_read() fails, in the following cases there will be no 
 * attempt to read the log, NULL will be returned and errno will set to the 
 * value it had on entry to the function:
 * 1. The proc parameter is NULL
 * 2. entry_num is < 0
 * 3. A file name cannot be generated from the given process descriptor.
 * 4. The log file cannot be opened.
 * 
 * If the above errors do not occur, joblog_read() attempts to read 
 * the entry specified by the given entry_num. 
 * If there is no entry in the log file for the given entry_num (e.g. 
 * entry_num is beyond the end of the file), then NULL will be returned 
 * and errno will have the value it had on entry to the function.
 * Other file processing errors may occur during attempts to read which 
 * are in effect ignored and the errno is set to the value it had on entry
 * to the function or, in some circumstances, an error may cause program
 * termination.
 * In summary, in the event of a detectable error or failure, implementations 
 * of this function will ensure that it is as if the function has no effect 
 * and has no side effects and, in particular, will set the errno to the value 
 * it had before the function was called.
 *
 * See also:
 * job.h - for a specification of JOB_STR_FMT and therefore the format of a 
 * log entry without the terminating new line character.
 * proc.h - for a description of the proc type
 */
job_t* joblog_read(proc_t* proc, int entry_num, job_t* job);

/*
 * joblog_write(proc_t* proc, job_t* job)
 *
 * Write an entry for the given job to the given process' log. 
 * Each log entry is on a single line in the log text file. The entry is
 * of the following form:
 *      pid:<proc_id>,id:<job_id>,pri:<priority>:label:<label>
 *
 * where <proc_id> is replaced by the 7 digit id of the process that created
 * the job, <job_id> is replaced by a 5 digit job id and <label> is replaced by 
 * the job's label of length MAX_NAME_SIZE - 1. The numeric ids are padded 
 * with leading 0s if they have less than the specified number of digits. The 
 * label is padded with trailing pad characters (see job.h). 
 * JOB_STR_FMT defines the format of an entry string. In the log, each entry is
 * terminated by a new line character.
 *
 * For example, for a job with pid of creating process 5, id 10, priority 1
 * and label "newjob", the log entry will be:
 * 
 *      pid:0000005,id:00010,pri:00001,label:newjob*************************
 *
 * on a single line of the log (i.e. terminated by a new line character)
 *
 * This ensures that each entry in the log file is exactly JOB_STR_SIZE 
 * characters long including the new line.
 *
 * Note: the pid in a log entry is the pid of the process that created the job. 
 * This is not necessarily the same as the calling process that is logging the
 * job in its log file. For example, a consumer process with pid 212 could be 
 * logging a job produced by a producer process with pid 99. In this case, the 
 * pid associated with the job in the log is 99 - the pid of the creator of the 
 * job.
 *
 * Log entries are appended to the log file. That is, the oldest log entry is 
 * at line 1 (entry number 0), the next oldest at line 2 etc. 
 *
 * Log entries are not in priority order. They are written to log in the order
 * that they are processed.
 *
 * See README_joblog_example.txt for an example joblog file.
 *
 * Parameters:
 * proc - the non-null descriptor of a process that will log jobs
 * job - the non-null pointer to a job descriptor
 *
 * Return:
 * joblog_write() does not return any value. See the Notes section.
 *
 * Errors:
 * joblog_write() returns without reporting errors caused by this 
 * function. Therefore, on return from this function the value of errno 
 * should be same as its value on entry to the function. See the Notes section.
 *
 * Notes:
 * If joblog_write() fails, the log entry is not written to the 
 * log file and the file will remain unchanged. Errors caused by the 
 * joblog_write function are suppressed as if the function were never
 * called. The function guarantees the following: 
 * 1. If either proc or job is NULL, the function returns without attempting
 *      to write to the log file.
 * 2. If a file name cannot be generated from the given process descriptor,
 *      the function returns without attempting to write to the log file.
 * 3. If the log file cannot be opened, the function returns without
 *      attempting to write to file.
 * 4. If a write to file is attempted but fails, errors are suppressed, the 
 *      function returns and the value of errno is the same as it was on 
 *      entry to the function. Some errors that cause program termination 
 *      cannot be suppressed.
 * In summary, in the event of a detectable error or failure, implementations 
 * of this function will ensure that it is as if the function has no effect 
 * and no side effects and, in particular, will set the errno to the value 
 * it had before the function was called.
 *
 * See also:
 * job.h - for a specification of JOB_STR_FMT and JOB_STR_SIZE and therefore 
 * the format of a log entry without the terminating new line character and the 
 * length of an entry in the log.
 * proc.h - for a description of the proc type
 */
void joblog_write(proc_t* proc, job_t* job);

/*
 * joblog_delete(proc_t* proc)
 *
 * Delete the given process' log.
 *
 * Usage:
 *      joblog_delete(proc);
 *  
 * Parameters:
 * proc - the non-null descriptor of the process whose log to delete
 *
 * Return:
 * joblog_delete() does not return any value.
 *
 * Errors:
 * joblog_delete() returns without reporting errors. Therefore, errno 
 * will have the value it had on entry to the function after this function 
 * returns. 
 *
 * See also:
 * proc.h - for a description of the proc type
 */
void joblog_delete(proc_t* proc);

#endif
