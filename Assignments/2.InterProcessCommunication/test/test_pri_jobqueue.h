/******** DO NOT EDIT THIS FILE ********/
/* 
 * test_pri_jobqueue.h - structures and function declarations for unit tests
 * of pri_jobqueue functions.
 */  
#ifndef _TEST_PRI_JOBQUEUE_H
#define _TEST_PRI_JOBQUEUE_H
#include "munit/munit.h"

MunitResult test_pri_jobqueue_new(const MunitParameter params[], 
    void* fixture);
    
MunitResult test_pri_jobqueue_init(const MunitParameter params[], 
    void* fixture);

MunitResult test_prijq_ndequeue_randpri(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_ndequeue_samepri(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_ndequeue_decpri(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_ndequeue_incpri(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_ndequeue_inout(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_ndequeue_randinout(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_ndequeue_heap(const MunitParameter params[], 
    void* fixture);

MunitResult test_prijq_dequeue_empty(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_dequeue_null(const MunitParameter params[], 
    void* fixture);

MunitResult test_prijq_enqueue_full(const MunitParameter params[],
    void* fixture);
MunitResult test_prijq_enqueue_null(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_enqueue_zeropri(const MunitParameter params[], 
    void* fixture);
    
MunitResult test_prijq_is_empty(const MunitParameter params[], void* fixture);
MunitResult test_prijq_is_empty_notempty(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_is_empty_nqnotempty(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_is_empty_null(const MunitParameter params[], 
    void* fixture);

MunitResult test_prijq_is_full_empty(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_is_full_filling(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_is_full_nqfilling(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_is_full_null(const MunitParameter params[], 
    void* fixture);

MunitResult test_prijq_peek_full(const MunitParameter params[], void* fixture);
MunitResult test_prijq_peek_empty(const MunitParameter params[], void* fixture);
MunitResult test_prijq_peek_heap(const MunitParameter params[], void* fixture);
MunitResult test_prijq_peek_null(const MunitParameter params[], void* fixture);

MunitResult test_prijq_size_empty(const MunitParameter params[], void* fixture);
MunitResult test_prijq_size_filling(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_size_nqfilling(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_size_null(const MunitParameter params[], 
    void* fixture);

MunitResult test_prijq_space_empty(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_space_filling(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_space_nqfilling(const MunitParameter params[], 
    void* fixture);
MunitResult test_prijq_space_null(const MunitParameter params[], 
    void* fixture);
    
MunitResult test_pri_jobqueue_delete(const MunitParameter params[], 
    void* fixture);

void* test_setup(const MunitParameter params[], void* user_data);
void test_tear_down(void* fixture);

static MunitTest tests[] = {
    { "/test_pri_jobqueue_new", test_pri_jobqueue_new, NULL, NULL,
        MUNIT_TEST_OPTION_NONE, NULL },

    { "/test_pri_jobqueue_init", test_pri_jobqueue_init, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },

    { "/test_prijq_ndequeue_randpri", test_prijq_ndequeue_randpri, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_ndequeue_samepri", test_prijq_ndequeue_samepri, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_ndequeue_decpri", test_prijq_ndequeue_decpri, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_ndequeue_incpri", test_prijq_ndequeue_incpri, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_ndequeue_inout", test_prijq_ndequeue_inout, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_ndequeue_randinout", test_prijq_ndequeue_randinout,
        test_setup, test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_ndequeue_heap", test_prijq_ndequeue_heap, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },

    { "/test_prijq_dequeue_empty", test_prijq_dequeue_empty, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_dequeue_null", test_prijq_dequeue_null, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },

    { "/test_prijq_enqueue_full", test_prijq_enqueue_full, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_enqueue_null", test_prijq_enqueue_null, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_enqueue_zeropri", test_prijq_enqueue_zeropri, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    
    { "/test_prijq_is_empty", test_prijq_is_empty, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_is_empty_notempty", test_prijq_is_empty_notempty, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_is_empty_nqnotempty", test_prijq_is_empty_nqnotempty,
        test_setup, test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_is_empty_null", test_prijq_is_empty_null, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },

    { "/test_prijq_is_full_empty", test_prijq_is_full_empty, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_is_full_filling", test_prijq_is_full_filling, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_is_full_nqfilling", test_prijq_is_full_nqfilling, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_is_full_null", test_prijq_is_full_null, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },

    { "/test_prijq_peek_full", test_prijq_peek_full, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_peek_empty", test_prijq_peek_empty, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_peek_heap", test_prijq_peek_heap, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_peek_null", test_prijq_peek_null, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },

    { "/test_prijq_size_empty", test_prijq_size_empty, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_size_filling", test_prijq_size_filling, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_size_nqfilling", test_prijq_size_nqfilling, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_size_null", test_prijq_size_null, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },

    { "/test_prijq_space_empty", test_prijq_space_empty, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_space_filling", test_prijq_space_filling, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_space_nqfilling", test_prijq_space_nqfilling, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },
    { "/test_prijq_space_null", test_prijq_space_null, test_setup,
        test_tear_down, MUNIT_TEST_OPTION_NONE, NULL },

    { "/test_pri_jobqueue_delete", test_pri_jobqueue_delete, NULL, NULL,
        MUNIT_TEST_OPTION_NONE, NULL },

    { NULL, NULL, NULL, NULL, MUNIT_TEST_OPTION_NONE, NULL},
};

static const MunitSuite suite = {
    "/test_pri_jobqueue", tests, NULL, 1, MUNIT_SUITE_OPTION_NONE 
};    

#endif